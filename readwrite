from flask import Flask, render_template, jsonify
from threading import Thread
import RPi.GPIO as GPIO
import time

app = Flask(__name__)

led_pin = 14  # GPIO 핀 번호
GPIO.setmode(GPIO.BCM)
GPIO.setup(led_pin, GPIO.OUT)
led_status = False  # 초기 LED 상태

# 백그라운드 스레드에서 LED 깜빡이기
def blink_led():
    while True:
        if led_status:  # LED가 켜져 있는 경우에만 작동
            GPIO.output(led_pin, GPIO.HIGH)
            time.sleep(0.5)
            GPIO.output(led_pin, GPIO.LOW)
            time.sleep(0.5)
        else:
            time.sleep(1)  # LED가 꺼져 있으면 1초 동안 대기

# 백그라운드 스레드 시작
blink_thread = Thread(target=blink_led)
blink_thread.start()

@app.route('/')
def index():
    return render_template('index.html', led_status=led_status)

@app.route('/toggle')
def toggle():
    global led_status
    led_status = not led_status
    if not led_status:  # LED를 끄는 경우 백그라운드 스레드 중지
        blink_thread.join()
    else:  # LED를 켜는 경우 백그라운드 스레드 다시 시작
        blink_thread = Thread(target=blink_led)
        blink_thread.start()

    GPIO.output(led_pin, led_status)  # LED 상태에 따라 GPIO 핀을 설정

    print(f'토글 요청이 수신되었습니다. 새로운 LED 상태: {led_status}')
    return jsonify({'status': 'success', 'led_status': led_status})

if __name__ == '__main__':
    try:
        app.run(host='172.20.10.9', port=5000, debug=False)

    except KeyboardInterrupt:
        # 사용자가 프로그램을 중지하면 GPIO 설정을 정리
        GPIO.cleanup()
